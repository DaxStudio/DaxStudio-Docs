"use strict";(globalThis.webpackChunkdaxstudio_docusaurus=globalThis.webpackChunkdaxstudio_docusaurus||[]).push([[5325],{16945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"features/command-line/authentication","title":"Authentication","description":"The way that dscmd authenticates to the data source depends on the which set of options are passed to the specific command","source":"@site/docs/features/command-line/authentication.md","sourceDirName":"features/command-line","slug":"/features/command-line/authentication","permalink":"/docs/features/command-line/authentication","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Authentication"},"sidebar":"tutorialSidebar","previous":{"title":"XLSX command","permalink":"/docs/features/command-line/commands/xlsx-command"},"next":{"title":"Connecting","permalink":"/docs/features/command-line/connecting"}}');var s=t(74848),o=t(28453);const r={title:"Authentication"},a=void 0,c={},d=[{value:"Using Options",id:"using-options",level:2},{value:"if the --connectionString option is set",id:"if-the---connectionstring-option-is-set",level:3},{value:"if the  --UserID or --Password options are set",id:"if-the----userid-or---password-options-are-set",level:3},{value:"Using the Authentication environment variables",id:"using-the-authentication-environment-variables",level:2},{value:"Authenticating as service principal",id:"authenticating-as-service-principal",level:2}];function h(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The way that dscmd authenticates to the data source depends on the which set of options are passed to the specific command"}),"\n",(0,s.jsx)(n.p,{children:"By default the identity running the dscmd process will be used for authentication. In the case of connections requiring an Entra ID a popup window will be displayed"}),"\n",(0,s.jsx)(n.h2,{id:"using-options",children:"Using Options"}),"\n",(0,s.jsx)(n.h3,{id:"if-the---connectionstring-option-is-set",children:"if the --connectionString option is set"}),"\n",(0,s.jsxs)(n.p,{children:["When you set the --connectionString property none of the other --UserID --Password --Server or --Database options are used, the connection string parameter overrides all of these. So if the connection string has a ",(0,s.jsx)(n.code,{children:"User ID="})," or ",(0,s.jsx)(n.code,{children:"Password="})," options then those are used otherwise the identity running the dscmd process will be used"]}),"\n",(0,s.jsx)(n.h3,{id:"if-the----userid-or---password-options-are-set",children:"if the  --UserID or --Password options are set"}),"\n",(0,s.jsx)(n.p,{children:"Then these parameters are used to authenticate to the data source."}),"\n",(0,s.jsx)(n.h2,{id:"using-the-authentication-environment-variables",children:"Using the Authentication environment variables"}),"\n",(0,s.jsx)(n.p,{children:"The values from those will be injected into the User ID= and Password= values in the connection string. This allows you to avoid hard coding credentials into scripts that use dscmd."}),"\n",(0,s.jsx)(n.p,{children:"There are 2 environment variables that dscmd is aware of:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DSCMD_USER"})})," - this is passed as the User ID"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DSCMD_PASSWORD"})})," - this is passed as the Password"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"authenticating-as-service-principal",children:"Authenticating as service principal"}),"\n",(0,s.jsxs)(n.p,{children:["To use the ",(0,s.jsx)(n.code,{children:"ClientID"})," and ",(0,s.jsx)(n.code,{children:"Secret"})," to login as a service principal you need to use the following format ",(0,s.jsx)(n.code,{children:"app:<clientId>@<tenantId>"})," as the user value and the ",(0,s.jsx)(n.code,{children:"secret"})," or ",(0,s.jsx)(n.code,{children:"cert:<thumbprint>"})," as the password value."]}),"\n",(0,s.jsxs)(n.p,{children:["eg. ",(0,s.jsx)(n.em,{children:"note: these are fake random values for illustration purposes only"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"dscmd csv c:\\temp\\myquery.csv -s localhost\\tab19 -d \"Adventure Works DW\"  ^\n  -m myColor=Red ^\n  -u app:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX@YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYY ^\n  -p ARandomStringForClientSecretHere\n  -q \"EVALUATE FILTER('product', 'product[Color]=@myColor && 'product'[Category]='Bikes')\"\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"It is recommended to store the clientId/secret in environment variables if possible rather than embedding these in your scripts"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);