"use strict";(globalThis.webpackChunkdaxstudio_docusaurus=globalThis.webpackChunkdaxstudio_docusaurus||[]).push([[7129],{20144:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/evaluate-customer-deabbc4433258f76548dc2405db162cd.png"},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var t=n(96540);const a={},i=t.createContext(a);function l(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(i.Provider,{value:s},e.children)}},46310:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorials/writing-dax-queries","title":"Writing DAX Queries","description":"DAX Queries have quite a simple structure. Microsoft describes the query syntax in their documentation here. But in this guide we are going to take a very practical, example based approach.","source":"@site/docs/tutorials/writing-dax-queries.md","sourceDirName":"tutorials","slug":"/tutorials/writing-dax-queries","permalink":"/docs/tutorials/writing-dax-queries","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Writing DAX Queries","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Connected","permalink":"/docs/tutorials/getting-connected"},"next":{"title":"Using the EvaluateAndLog Trace","permalink":"/docs/tutorials/evaluateandlog-trace"}}');var a=n(74848),i=n(28453);const l={title:"Writing DAX Queries",sidebar_position:2},r=void 0,o={},c=[{value:"Basic Queries",id:"basic-queries",level:2},{value:"Sorting Results",id:"sorting-results",level:2},{value:"Adding Calculations",id:"adding-calculations",level:2},{value:"Returning a single value",id:"returning-a-single-value",level:2},{value:"Selecting columns from multiple tables",id:"selecting-columns-from-multiple-tables",level:2},{value:"Multiple Resultsets",id:"multiple-resultsets",level:2},{value:"Using Parameters in Queries",id:"using-parameters-in-queries",level:2}];function u(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["DAX Queries have quite a simple structure. Microsoft describes the query syntax in their documentation ",(0,a.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dax/dax-queries",children:"here"}),". But in this guide we are going to take a very practical, example based approach."]}),"\n",(0,a.jsx)(s.p,{children:"If you want to follow along and try out these queries yourself all you need is:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"DAX Studio"}),"\n",(0,a.jsx)(s.li,{children:"Power BI Desktop"}),"\n",(0,a.jsxs)(s.li,{children:["the ",(0,a.jsx)(s.a,{href:"https://aka.ms/dax-docs-sample-file",children:"Adventure Works 2020"})," sample file"]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["The simplest way to get started after installing both DAX Studio and Power BI Desktop is to open the ",(0,a.jsx)(s.strong,{children:"Adventure Works 2020.pbix"})," file, then click on External Tools and launch DAX Studio from there."]}),"\n",(0,a.jsx)(s.admonition,{type:"tip",children:(0,a.jsxs)(s.p,{children:["For more details on how you can connect to your particular data model check out the tutorial on ",(0,a.jsx)(s.a,{href:"../getting-connected/",children:"Getting Connected"})]})}),"\n",(0,a.jsx)(s.h2,{id:"basic-queries",children:"Basic Queries"}),"\n",(0,a.jsxs)(s.p,{children:["The simplest form of DAX query is ",(0,a.jsx)(s.code,{children:"EVALUATE <table expression>"})]}),"\n",(0,a.jsxs)(s.p,{children:["So you can run ",(0,a.jsx)(s.code,{children:"EVALUATE Customer"})," to output all the rows in the customer table"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:n(20144).A+"",width:"1125",height:"748"})}),"\n",(0,a.jsxs)(s.p,{children:["But you don't just have to use a table name, you can use any function that returns a table. To get a distinct list of all the values in a column you can use the ",(0,a.jsx)(s.a,{href:"https://dax.guide/values",children:"VALUES"})," function which returns a table with a single column with all the unique values from the specified column."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"EVALUATE\nVALUES ( Customer[City] )\n"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:n(69754).A+"",width:"1125",height:"748"})}),"\n",(0,a.jsxs)(s.p,{children:["Or if you don't want every row in the table you could use the ",(0,a.jsx)(s.a,{href:"https://dax.guide/calculatetable",children:"CALCULATETABLE"})," function to only return rows that meet a given criteria."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:'EVALUATE\nCALCULATETABLE ( Customer, Customer[City] = "Redmond" )\n'})}),"\n",(0,a.jsxs)(s.p,{children:["You can even combine the ",(0,a.jsx)(s.a,{href:"https://dax.guide/values",children:"VALUES"})," and ",(0,a.jsx)(s.a,{href:"https://dax.guide/calculatetable",children:"CALCULATETABLE"}),' functions to get a list of all Cities that have a first character of "R"']}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:'EVALUATE\nCALCULATETABLE ( VALUES ( Customer[City] ), LEFT ( Customer[City], 1 ) = "R" )\n'})}),"\n",(0,a.jsx)(s.h2,{id:"sorting-results",children:"Sorting Results"}),"\n",(0,a.jsxs)(s.p,{children:["If we continue on with the previous example you will see that the results come back in a random order. If we want our query to sort the results we can add an optional ",(0,a.jsx)(s.code,{children:"ORDER BY"})," clause to the end of the query. So if we wanted to sort the results by the city name we would do the following:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:'EVALUATE\nCALCULATETABLE ( VALUES ( Customer[City] ), LEFT ( Customer[City], 1 ) = "R" )\nORDER BY Customer[City]\n'})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"NOTE:"})," Some client tools (like Power BI Desktop) will generate an ",(0,a.jsx)(s.code,{children:"ORDER BY"})," clause for you based on the properties set in your data model"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"adding-calculations",children:"Adding Calculations"}),"\n",(0,a.jsxs)(s.p,{children:["To add a calculation to your query like measures and variables you would use the optional ",(0,a.jsx)(s.code,{children:"DEFINE"})," keyword at the start of your query"]}),"\n",(0,a.jsxs)(s.p,{children:["To define a new measure in your query which sums the value of the existing ",(0,a.jsx)(s.code,{children:"Sales[Sales Amount]"})," column you would write the following:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"DEFINE\n    MEASURE Sales[My Sales Amount] =\n        SUM ( Sales[Sales Amount] )\nEVALUATE\nADDCOLUMNS ( VALUES ( 'Date'[Month] ), \"My Sales Amount\", [My Sales Amount] )\n"})}),"\n",(0,a.jsxs)(s.p,{children:["To define multiple measures you can add multiple blocks of ",(0,a.jsx)(s.code,{children:"MEASURE <table>[<measure name>] = <expression>"})]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:'DEFINE\n    MEASURE Sales[My Sales Amount] =\n        SUM ( Sales[Sales Amount] )\n    MEASURE Sales[My Double Sales Amount] =\n        SUM ( Sales[Sales Amount] ) * 2\nEVALUATE\nADDCOLUMNS (\n    VALUES ( \'Date\'[Month] ),\n    "My Sales Amount", [My Sales Amount],\n    "My Double Sales Amount", [My Double Sales Amount]\n)\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:n(82663).A+"",width:"1125",height:"748"})}),"\n",(0,a.jsx)(s.h2,{id:"returning-a-single-value",children:"Returning a single value"}),"\n",(0,a.jsx)(s.p,{children:"Sometimes you may just want to return the result of a measure. But measures return a single scalar value not a table, so if you try to write the following it will produce a syntax error"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"EVALUATE\nSUM ( Sales[Sales Amount] )\n"})}),"\n",(0,a.jsxs)(s.p,{children:["We can fix this by using the table constructor syntax and wrapping the measure in curly braces ",(0,a.jsx)(s.code,{children:"{ }"})]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"EVALUATE\n{ SUM ( Sales[Sales Amount] ) }\n"})}),"\n",(0,a.jsxs)(s.p,{children:["For older versions of the tabular engine which do not support the table constructor syntax we can use the ",(0,a.jsx)(s.a,{href:"https://dax.guide/row",children:"ROW"})," function"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:'EVALUATE\nROW ( "Sales Amount", [Sales Amount] )\n'})}),"\n",(0,a.jsxs)(s.p,{children:["You can also mix this with the ",(0,a.jsx)(s.code,{children:"DEFINE"})," clause to create a measure expression and then return a single value"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"DEFINE\n    MEASURE Sales[Total Sales] =\n        SUM ( Sales[Sales Amount] )\nEVALUATE\n{ [Total Sales] }\n"})}),"\n",(0,a.jsx)(s.h2,{id:"selecting-columns-from-multiple-tables",children:"Selecting columns from multiple tables"}),"\n",(0,a.jsxs)(s.p,{children:["The easiest way to generate a query using columns from multiple tables is to use the ",(0,a.jsx)(s.a,{href:"https://dax.guide/summarizecolumns",children:"SUMMARIZECOLUMNS"})," function. This function takes a list of columns, followed by an optional list of table expressions to use as filters, followed by an optional list of measures/expressions."]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"NOTE:"})," It is ",(0,a.jsx)(s.em,{children:(0,a.jsx)(s.strong,{children:"strongly"})})," recommended to always use a measure or expression of some sort with the ",(0,a.jsx)(s.code,{children:"SUMMARIZECOLUMNS"})," function if you don't do this the function will generate a large crossjoin of all possible combinations of every value in the specified columns which is not normally useful"]}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"EVALUATE\nSUMMARIZECOLUMNS (\n    Product[Color],\n    Reseller[Business Type],\n    FILTER ( ALL ( 'Product'[List Price] ), 'Product'[List Price] > 150.00 ),\n    TREATAS ( { \"Accessories\", \"Bikes\" }, 'Product'[Category] ),\n    \"Total Sales\", SUM ( Sales[Sales Amount] )\n)\n"})}),"\n",(0,a.jsx)(s.h2,{id:"multiple-resultsets",children:"Multiple Resultsets"}),"\n",(0,a.jsx)(s.p,{children:"DAX queries also allow for the return of multiple recordsets within a given batch"}),"\n",(0,a.jsx)(s.p,{children:"So you can execute the following:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"EVALUATE\nCustomer\nEVALUATE\n'Product'\n"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:n(47547).A+"",width:"1125",height:"748"})}),"\n",(0,a.jsxs)(s.p,{children:["And you will get 2 tabs returned in DAX Studio, one with the contents of the ",(0,a.jsx)(s.strong,{children:"Customer"})," table and the other with the contents of the ",(0,a.jsx)(s.strong,{children:"Product"})," table."]}),"\n",(0,a.jsxs)(s.p,{children:["But note that within a single batch, although you can have multiple ",(0,a.jsx)(s.code,{children:"EVALUATE"})," statements you can only have a single ",(0,a.jsx)(s.code,{children:"DEFINE"})," statement. So you would need to declare all your calculations in that one block."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"DEFINE\n    MEASURE Sales[Total Sales] =\n        SUM ( Sales[Sales Amount] )\n    MEASURE Sales[Total Cost] =\n        SUMX ( Sales, Sales[Unit Price] * Sales[Order Quantity] )\nEVALUATE\n{ [Total Sales] }\nEVALUATE\n{ [Total Cost] }\n"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:n(65658).A+"",width:"1125",height:"748"})}),"\n",(0,a.jsx)(s.h2,{id:"using-parameters-in-queries",children:"Using Parameters in Queries"}),"\n",(0,a.jsxs)(s.p,{children:["One of the unique features that DAX Studio has is the ",(0,a.jsx)(s.a,{href:"/docs/features/parameter-support/",children:"support for parameterized queries"})]}),"\n",(0,a.jsx)(s.p,{children:"To add a parameter to a DAX query you can start with a query that includes a filter such as the following:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"EVALUATE\nFILTER ( 'Product', 'Product'[Color] = \"Red\" )\n"})}),"\n",(0,a.jsxs)(s.p,{children:["And then replace the reference to ",(0,a.jsx)(s.code,{children:'"Red"'})," with a parameter called ",(0,a.jsx)(s.code,{children:"@Color"})]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-dax",children:"EVALUATE\nFILTER ( 'Product', 'Product'[Color] = @Color )\n"})}),"\n",(0,a.jsx)(s.p,{children:"When you execute a query with a parameter, DAX Studio will prompt you for the parameter to use"}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:n(69435).A+"",width:"1125",height:"748"})})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},47547:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/evaluate-2-recordsets-2d36bd864113220bd2636a99f73be28a.png"},65658:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/evaluate-2-recordsets-with-measures-1d0c4c52e0042829e6b6f95b9b6d16f9.png"},69435:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/evaluate-parameter-87695ba16a33454db1700d49ea2b72e3.png"},69754:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/evaluate-customer-city-1484eb060755d9d8bb25076f699babed.png"},82663:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/evaluate-define-measures-9adf45b3ddd382db8272b26eaa4a3550.png"}}]);